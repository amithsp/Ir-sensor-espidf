/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9.1 */

#ifndef PB_CONTROL_PB_H_INCLUDED
#define PB_CONTROL_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _ControlCommand {
    uint32_t id;
    float speed;
    float steering;
    bool enable;
} ControlCommand;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ControlCommand_init_default              {0, 0, 0, 0}
#define ControlCommand_init_zero                 {0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ControlCommand_id_tag                    1
#define ControlCommand_speed_tag                 2
#define ControlCommand_steering_tag              3
#define ControlCommand_enable_tag                4

/* Struct field encoding specification for nanopb */
#define ControlCommand_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, FLOAT,    speed,             2) \
X(a, STATIC,   SINGULAR, FLOAT,    steering,          3) \
X(a, STATIC,   SINGULAR, BOOL,     enable,            4)
#define ControlCommand_CALLBACK NULL
#define ControlCommand_DEFAULT NULL

extern const pb_msgdesc_t ControlCommand_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ControlCommand_fields &ControlCommand_msg

/* Maximum encoded size of messages (where known) */
#define CONTROL_PB_H_MAX_SIZE                    ControlCommand_size
#define ControlCommand_size                      18

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
